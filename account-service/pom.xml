<?xml version="1.0" encoding="UTF-8"?>
<!--
 POM für account-service (Spring Boot 3.4.4)
 Ziele:
  - Saubere Test-Pyramide: Unit (Surefire) vs. Integration (Failsafe + Testcontainers)
  - Beobachtbarkeit: Actuator + Prometheus
  - Security: Spring Security + spring-security-test für Tests
  - Optional: Redis & JWT (entfernen, falls im Service nicht benötigt)
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!-- Spring Boot BOM/Parent steuert kompatible Versionen (Dependency-Management) -->
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.4.4</version>
    <relativePath/>
  </parent>

  <!-- Dein Artefakt -->
  <groupId>com.bankportal</groupId>
  <artifactId>account-service</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>account-service</name>
  <description>Spring Boot REST Account Service</description>
  <packaging>jar</packaging>

  <properties>
    <!-- Java 17 ist die stabile Basis für Boot 3.x -->
    <java.version>17</java.version>

    <!-- SonarCloud Einstellungen (optional für CI-Qualitätsanalyse) -->
    <sonar.organization>thanhtuanh</sonar.organization>
    <sonar.host.url>https://sonarcloud.io</sonar.host.url>
  </properties>

  <dependencies>
    <!-- Web-Stack: REST-Controller, Jackson, Validation-Basis -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- JPA + Hibernate -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <!-- Postgres JDBC-Treiber: nur zur Laufzeit benötigt -->
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- Security im Produktivcode (für Endpunkte, Rollen, JWT-Filter etc.) -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <!-- Observability: Health, Metrics, Env, usw. -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

    <!-- Prometheus Exporter (Micrometer-Registry) -->
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-prometheus</artifactId>
    </dependency>

    <!-- OPTIONAL: Redis (entfernen, falls im account-service nicht genutzt) -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-redis</artifactId>
    </dependency>

    <!-- Bean Validation (für DTO-Validierung @NotNull, @Size, ...) -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>

    <!-- Swagger/OpenAPI UI (http://localhost:8082/swagger-ui.html) -->
    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
      <version>2.7.0</version>
    </dependency>

    <!-- OPTIONAL: JWT – nur benötigen, wenn Token im Service selbst verifiziert/erzeugt werden -->
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-api</artifactId>
      <version>0.12.3</version>
    </dependency>
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-impl</artifactId>
      <version>0.12.3</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-jackson</artifactId>
      <version>0.12.3</version>
      <scope>runtime</scope>
    </dependency>

    <!-- ===== TEST-DEPENDENCIES ===== -->

    <!-- JUnit 5, AssertJ, Mockito (kommt mit) -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
      <exclusions>
        <!-- Vintage raus, damit nur JUnit 5 läuft -->
        <exclusion>
          <groupId>org.junit.vintage</groupId>
          <artifactId>junit-vintage-engine</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Mockito-Erweiterung für JUnit 5 (@ExtendWith(MockitoExtension.class)) -->
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Security-Test-Helfer (MockMvc mit @WithMockUser, RequestPostProcessors, …) -->
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-test</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Testcontainers: JUnit-Jupiter Binding -->
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Testcontainers: Postgres-Container für echte DB-Integrationstests -->
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>postgresql</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Jackson explizit (wird i. d. R. vom Boot-BOM gemanagt; kann entfernt werden) -->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Spring Boot: Repackaging (fat jar), Start/Stop Ziele etc. -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>

      <!-- Unit-Tests laufen mit Surefire (Namensmuster: *Test.java) -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <!-- Module-Path aus, falls Klassloader/JPMS stört -->
          <useModulePath>false</useModulePath>
          <!-- Standard-Includes: **/*Test.java, **/*Tests.java, **/*TestCase.java -->
        </configuration>
      </plugin>

      <!-- Integrationstests laufen mit Failsafe (Namensmuster: *IT.java / *IntegrationTest.java) -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>3.2.5</version>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
            <configuration>
              <useModulePath>false</useModulePath>
              <includes>
                <!-- nur diese Muster gelten als ITs -->
                <include>**/*IT.java</include>
                <include>**/*IntegrationTest.java</include>
              </includes>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <!-- Optionales CI-Profil: wird automatisch aktiv, wenn ENV VAR CI gesetzt ist -->
  <profiles>
    <profile>
      <id>ci</id>
      <activation>
        <property>
          <name>env.CI</name>
        </property>
      </activation>
      <properties>
        <!-- Sicherheitshalber: Tests in CI nicht skippen -->
        <maven.test.skip>false</maven.test.skip>
      </properties>
    </profile>
  </profiles>
</project>
