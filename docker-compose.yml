version: '3.8'

# Bank Portal - Demo Environment
# ðŸŽ¯ Ready-to-run Demo ohne .env Dateien erforderlich
# FÃ¼r Production: Verwenden Sie docker-compose-backup.yml mit sicheren Secrets

networks:
  bank-network:
    driver: bridge

volumes:
  auth_data:
    driver: local
  account_data:
    driver: local
  redis_data:
    driver: local

services:
  # PostgreSQL fÃ¼r Auth-Service
  postgres-auth:
    image: postgres:15-alpine
    container_name: postgres-auth
    environment:
      POSTGRES_DB: authdb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5433:5432"
    volumes:
      - auth_data:/var/lib/postgresql/data
    networks:
      - bank-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d authdb"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # PostgreSQL fÃ¼r Account-Service
  postgres-account:
    image: postgres:15-alpine
    container_name: postgres-account
    environment:
      POSTGRES_DB: accountdb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5434:5432"
    volumes:
      - account_data:/var/lib/postgresql/data
    networks:
      - bank-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d accountdb"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis fÃ¼r Caching/Health (Account-Service)
  redis:
    image: redis:7-alpine
    container_name: bankportal-redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bank-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # Auth Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "8081:8081"
    environment:
      # Demo-Konfiguration - FÃ¼r Production Ã¤ndern!
      SPRING_PROFILES_ACTIVE: development
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-auth:5432/authdb
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      JWT_SECRET: demo-jwt-secret-change-in-production
      JWT_EXPIRATION: 86400
      CORS_ALLOWED_ORIGINS: http://localhost:4200
      LOGGING_LEVEL_COM_BANKPORTAL: INFO
    depends_on:
      postgres-auth:
        condition: service_healthy
    networks:
      - bank-network
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8081/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Account Service
  account-service:
    build:
      context: ./account-service
      dockerfile: Dockerfile
    container_name: account-service
    ports:
      - "8082:8082"
    environment:
      # Demo-Konfiguration - FÃ¼r Production Ã¤ndern!
      SPRING_PROFILES_ACTIVE: development
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-account:5432/accountdb
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin

      # ðŸ”´ Wichtig: Kein "localhost" in Containern â€“ auf Service-Namen verweisen!
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379

      AUTH_SERVICE_URL: http://auth-service:8081
      JWT_SECRET: demo-jwt-secret-change-in-production
      CORS_ALLOWED_ORIGINS: http://localhost:4200
      LOGGING_LEVEL_COM_BANKPORTAL: INFO
    depends_on:
      postgres-account:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bank-network
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8082/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Frontend (Angular via Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "4200:80"
    environment:
      # Demo-Konfiguration â€“ der Browser ruft localhost:8081/8082 auf
      API_BASE_URL: http://localhost:8081
      ACCOUNT_API_URL: http://localhost:8082
      NODE_ENV: development
    depends_on:
      auth-service:
        condition: service_healthy
      account-service:
        condition: service_healthy
    networks:
      - bank-network
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
