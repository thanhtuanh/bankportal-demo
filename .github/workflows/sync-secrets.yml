name: Sync Environment Secrets

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to sync (development, staging, production)'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production
      force_update:
        description: 'Force update existing secrets'
        required: false
        default: false
        type: boolean

  # Automatisch bei Push von .env.example √Ñnderungen
  push:
    paths:
      - '.env.example'
      - '.env.template'
    branches:
      - main

env:
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
  # Prefer a PAT with repo/secrets scope if provided, fallback to GITHUB_TOKEN
  GH_TOKEN: ${{ secrets.GH_SECRETS_TOKEN || secrets.GITHUB_TOKEN }}

jobs:
  sync-secrets:
    name: üîê Sync Environment Secrets
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
      
      - name: üîê Setup GitHub CLI
        run: |
          # GitHub CLI ist bereits in GitHub Actions verf√ºgbar
          gh --version
          # Pr√ºfe Auth-Status (nutzt GH_TOKEN aus env)
          gh auth status || gh auth login --with-token <<< "$GH_TOKEN"
      
      - name: üìã Validate Environment File
        run: |
          ENV_FILE=".env.example"
          
          if [[ ! -f "$ENV_FILE" ]]; then
            echo "‚ùå $ENV_FILE nicht gefunden!"
            exit 1
          fi
          
          echo "‚úÖ $ENV_FILE gefunden"
          echo "üìä Anzahl Variablen: $(grep -c '^[^#].*=' $ENV_FILE || echo 0)"
      
      - name: üîÑ Sync Secrets from Template
        id: sync_secrets
        run: |
          ENV_FILE=".env.example"
          ENVIRONMENT="${{ env.ENVIRONMENT }}"
          FORCE_UPDATE="${{ github.event.inputs.force_update }}"
          
          echo "üîê Synchronisiere Secrets f√ºr Environment: $ENVIRONMENT"
          echo "üîÑ Force Update: $FORCE_UPDATE"
          echo ""
          
          # Counters
          success_count=0
          skip_count=0
          error_count=0
          
          # Read .env.example and create secrets with environment prefix
          while IFS='=' read -r key value || [[ -n "$key" ]]; do
            # Skip empty lines and comments
            if [[ -z "$key" || "$key" =~ ^[[:space:]]*# ]]; then
              continue
            fi
            
            # Clean key and value
            key=$(echo "$key" | xargs)
            value=$(echo "$value" | xargs)
            
            # Skip if key or value is empty or contains placeholder
            if [[ -z "$key" || -z "$value" || "$value" =~ CHANGE_ME ]]; then
              continue
            fi
            
            # Create environment-specific secret name
            secret_name="${ENVIRONMENT^^}_${key}"
            
            # Check if secret already exists (if not forcing update)
            if [[ "$FORCE_UPDATE" != "true" ]]; then
              if gh secret list | grep -q "^$secret_name"; then
                echo "‚è≠Ô∏è  Skip existing secret: $secret_name"
                ((skip_count++))
                continue
              fi
            fi
            
            # Set the secret
            echo "üì§ Setting secret: $secret_name"
            if echo "$value" | gh secret set "$secret_name"; then
              echo "‚úÖ Successfully set: $secret_name"
              ((success_count++))
            else
              echo "‚ùå Failed to set: $secret_name"
              ((error_count++))
            fi
            
          done < "$ENV_FILE"
          
          echo ""
          echo "üìä Synchronisation Summary:"
          echo "‚úÖ Success: $success_count secrets"
          echo "‚è≠Ô∏è  Skipped: $skip_count secrets"
          echo "‚ùå Errors: $error_count secrets"
          
          # Set output for next steps
          echo "success_count=$success_count" >> $GITHUB_OUTPUT
          echo "error_count=$error_count" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}
      
      - name: üìä List Current Secrets
        run: |
          echo "üìã Current Repository Secrets:"
          gh secret list
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}
      
      - name: üí¨ Create Summary Comment
        if: github.event_name == 'workflow_dispatch'
        run: |
          ENVIRONMENT="${{ env.ENVIRONMENT }}"
          SUCCESS_COUNT="${{ steps.sync_secrets.outputs.success_count }}"
          ERROR_COUNT="${{ steps.sync_secrets.outputs.error_count }}"
          
          echo "## üîê Secrets Synchronisation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
          echo "**Success:** $SUCCESS_COUNT secrets" >> $GITHUB_STEP_SUMMARY
          echo "**Errors:** $ERROR_COUNT secrets" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Available Secrets:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          gh secret list >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}

  validate-secrets:
    name: üß™ Validate Secrets in CI/CD
    runs-on: ubuntu-latest
    needs: sync-secrets
    if: always()
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
      
      - name: üîç Test Secret Access
        run: |
          echo "üß™ Testing secret access in CI/CD context..."
          
          # Test if secrets are accessible (without exposing values)
          if [[ -n "${{ secrets.PRODUCTION_JWT_SECRET }}" ]]; then
            echo "‚úÖ PRODUCTION_JWT_SECRET is accessible"
          else
            echo "‚ö†Ô∏è  PRODUCTION_JWT_SECRET not found"
          fi
          
          if [[ -n "${{ secrets.PRODUCTION_POSTGRES_AUTH_PASSWORD }}" ]]; then
            echo "‚úÖ PRODUCTION_POSTGRES_AUTH_PASSWORD is accessible"
          else
            echo "‚ö†Ô∏è  PRODUCTION_POSTGRES_AUTH_PASSWORD not found"
          fi
          
          echo ""
          echo "üí° Secrets k√∂nnen jetzt in anderen Workflows verwendet werden:"
          echo "   environment:"
          echo "     JWT_SECRET: \${{ secrets.PRODUCTION_JWT_SECRET }}"
          echo "     DB_PASSWORD: \${{ secrets.PRODUCTION_POSTGRES_AUTH_PASSWORD }}"
