name: Bank Portal CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  frontend-build-test:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - run: npm ci
    - run: npm run lint
    - run: npm run test:ci
    # TODO: E2E-Tests vorerst deaktiviert
    # - run: npm run e2e:ci

    - run: npm run build:prod

    - uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/
        retention-days: 30

  auth-service-build-test:
    name: Auth Service Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./auth-service

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: authdb_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - run: mvn test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/authdb_test
        SPRING_DATASOURCE_USERNAME: test
        SPRING_DATASOURCE_PASSWORD: test
        JWT_SECRET: testsecretkeytestsecretkeytestsecretkey123456

    - run: mvn clean package -DskipTests

    - uses: actions/upload-artifact@v4
      with:
        name: auth-service-jar
        path: auth-service/target/*.jar
        retention-days: 30

  account-service-build-test:
    name: Account Service Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./account-service

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: accountdb_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - run: mvn test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5433/accountdb_test
        SPRING_DATASOURCE_USERNAME: test
        SPRING_DATASOURCE_PASSWORD: test
        JWT_SECRET: testsecretkeytestsecretkeytestsecretkey123456

    - run: mvn clean package -DskipTests

    - uses: actions/upload-artifact@v4
      with:
        name: account-service-jar
        path: account-service/target/*.jar
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [frontend-build-test, auth-service-build-test, account-service-build-test]

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    # TODO: Upload SARIF vorerst deaktiviert bis Permissions gekl√§rt
    # - uses: github/codeql-action/upload-sarif@v3
    #   with:
    #     sarif_file: 'trivy-results.sarif'

    - name: Frontend Security Audit
      working-directory: ./frontend
      run: |
        npm ci
        npm audit --audit-level high

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: [frontend-build-test, auth-service-build-test, account-service-build-test]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    # TODO: SonarCloud vorerst auskommentiert bis POM-Scope klar
    # - name: SonarCloud Scan - Auth Service
    #   working-directory: ./auth-service
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #   run: |
    #     mvn sonar:sonar \
    #       -Dsonar.projectKey=${{ github.repository_owner }}_bankportal-auth-service \
    #       -Dsonar.organization=${{ github.repository_owner }} \
    #       -Dsonar.host.url=https://sonarcloud.io

    # - name: SonarCloud Scan - Account Service
    #   working-directory: ./account-service
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #   run: |
    #     mvn sonar:sonar \
    #       -Dsonar.projectKey=${{ github.repository_owner }}_bankportal-account-service \
    #       -Dsonar.organization=${{ github.repository_owner }} \
    #       -Dsonar.host.url=https://sonarcloud.io

  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [auth-service-build-test]

    strategy:
      matrix:
        service: [auth-service]

    steps:
    - uses: actions/checkout@v4

    - name: Download auth-service JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: auth-service-jar
        path: ./auth-service/target

    - uses: docker/setup-buildx-action@v3

    - uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # TODO: GHCR Push vorerst deaktiviert bis Package Permission gesetzt ist
    # - name: Build and push Docker image
    #   uses: docker/build-push-action@v5
    #   with:
    #     context: ./auth-service
    #     push: true
    #     tags: ghcr.io/thanhtuanh/bankportal-demo-auth-service:latest
