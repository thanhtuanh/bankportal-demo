name: Bank Portal CI/CD Pipeline

on:
  push:
    branches: [ main, develop, k8s, stand-1, stand-2 ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  # =========================
  # Frontend: Test + Build
  # =========================
  frontend-build:
    name: üåê Frontend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install deps
        run: npm ci --legacy-peer-deps

      - name: Run unit tests (headless)
        run: npm test -- --watch=false --browsers=ChromeHeadless

      - name: Build (prod)
        run: npm run build:prod

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/

  # ==================================
  # Auth Service: Tests + Artifact
  # ==================================
  auth-service-build:
    name: üîê Auth Service Build & Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: authdb_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready --health-interval 10s
          --health-timeout 5s --health-retries 5
        ports: ['5432:5432']

    defaults:
      run:
        working-directory: auth-service

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
          cache: maven

      - name: Verify (unit+it tests)
        run: mvn -B -ntp -DskipTests=false -DfailIfNoTests=true verify
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/authdb_test
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: auth-service-test-reports
          path: |
            auth-service/target/surefire-reports/**
            auth-service/target/failsafe-reports/**

      - name: Package (no tests)
        run: mvn -B -ntp -DskipTests package

      - uses: actions/upload-artifact@v4
        with:
          name: auth-service-jar
          path: auth-service/target/*.jar

  # ======================================
  # Account Service: Tests + Artifact
  # ======================================
  account-service-build:
    name: üíº Account Service Build & Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: accountdb_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready --health-interval 10s
          --health-timeout 5s --health-retries 5
        ports: ['5433:5432']

    defaults:
      run:
        working-directory: account-service

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
          cache: maven

      - name: Verify (unit+it tests)
        run: mvn -B -ntp -DskipTests=false -DfailIfNoTests=true verify
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5433/accountdb_test
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: account-service-test-reports
          path: |
            account-service/target/surefire-reports/**
            account-service/target/failsafe-reports/**

      - name: Package (no tests)
        run: mvn -B -ntp -DskipTests package

      - uses: actions/upload-artifact@v4
        with:
          name: account-service-jar
          path: account-service/target/*.jar

  # =====================
  # SonarCloud Scans
  # =====================
  sonar-auth-service:
    name: üîç SonarCloud Analysis - Auth Service
    runs-on: ubuntu-latest
    needs: [auth-service-build]
    defaults:
      run:
        working-directory: auth-service
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
      - uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
      - uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      - name: Sonar scan
        run: |
          mvn -B -ntp verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=thanhtuanh_bankportal-demo-auth-service \
            -Dsonar.projectName="Bank Portal Auth Service" \
            -Dsonar.organization=thanhtuanh \
            -Dsonar.host.url=https://sonarcloud.io
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  sonar-account-service:
    name: üîç SonarCloud Analysis - Account Service
    runs-on: ubuntu-latest
    needs: [account-service-build]
    defaults:
      run:
        working-directory: account-service
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
      - uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
      - uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      - name: Sonar scan
        run: |
          mvn -B -ntp verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=thanhtuanh_bankportal-demo-account-service \
            -Dsonar.projectName="Bank Portal Account Service" \
            -Dsonar.organization=thanhtuanh \
            -Dsonar.host.url=https://sonarcloud.io
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # =========================
  # Docker Build & Push
  # =========================
  docker-build:
    name: üê≥ Docker Build & Push
    runs-on: ubuntu-latest
    needs: [frontend-build, auth-service-build, account-service-build, sonar-auth-service, sonar-account-service]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/setup-buildx-action@v3

      # metadata + tags for each image
      - name: Meta (auth)
        id: meta_auth
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}/auth-service
          tags: |
            type=raw,value=latest
            type=sha
            type=ref,event=branch

      - name: Meta (account)
        id: meta_account
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}/account-service
          tags: |
            type=raw,value=latest
            type=sha
            type=ref,event=branch

      - name: Meta (frontend)
        id: meta_frontend
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}/frontend
          tags: |
            type=raw,value=latest
            type=sha
            type=ref,event=branch

      - uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: ./frontend/dist/
      - uses: actions/download-artifact@v4
        with:
          name: auth-service-jar
          path: ./auth-service/target/
      - uses: actions/download-artifact@v4
        with:
          name: account-service-jar
          path: ./account-service/target/

      - name: Build & push auth-service
        uses: docker/build-push-action@v6
        with:
          context: auth-service
          push: true
          tags: ${{ steps.meta_auth.outputs.tags }}
          labels: ${{ steps.meta_auth.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & push account-service
        uses: docker/build-push-action@v6
        with:
          context: account-service
          push: true
          tags: ${{ steps.meta_account.outputs.tags }}
          labels: ${{ steps.meta_account.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: frontend
          push: true
          tags: ${{ steps.meta_frontend.outputs.tags }}
          labels: ${{ steps.meta_frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =========================
  # Simple Integration Tests
  # =========================
  integration-test:
    name: üß™ Integration Tests (health checks)
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create network
        run: docker network create itest-net || true

      - name: Start Postgres
        run: |
          docker run -d --rm --name itest-pg --network itest-net \
            -e POSTGRES_USER=bank \
            -e POSTGRES_PASSWORD=pass \
            -e POSTGRES_DB=bank \
            -p 5432:5432 postgres:15
          
          # Wait until Postgres is ready with better error handling
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..60}; do
            if docker exec itest-pg pg_isready -U bank -d bank > /dev/null 2>&1; then
              echo "PostgreSQL is ready after $i attempts"
              break
            fi
            echo "Waiting for PostgreSQL... attempt $i/60"
            if [ $i -eq 60 ]; then
              echo "PostgreSQL failed to start in time"
              docker logs itest-pg
              exit 1
            fi
            sleep 2
          done

      - name: Start Auth Service
        run: |
          docker run -d --rm --name itest-auth --network itest-net \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://itest-pg:5432/bank \
            -e SPRING_DATASOURCE_USERNAME=bank \
            -e SPRING_DATASOURCE_PASSWORD=pass \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e SERVER_PORT=8080 \
            -e LOGGING_LEVEL_ROOT=INFO \
            -p 8081:8080 ghcr.io/${{ env.IMAGE_NAME }}/auth-service:latest
          
          # Wait for auth service to start
          echo "Waiting for Auth Service to start..."
          sleep 10

      - name: Start Account Service
        run: |
          docker run -d --rm --name itest-account --network itest-net \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://itest-pg:5432/bank \
            -e SPRING_DATASOURCE_USERNAME=bank \
            -e SPRING_DATASOURCE_PASSWORD=pass \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e SERVER_PORT=8080 \
            -e LOGGING_LEVEL_ROOT=INFO \
            -p 8082:8080 ghcr.io/${{ env.IMAGE_NAME }}/account-service:latest
          
          # Wait for account service to start
          echo "Waiting for Account Service to start..."
          sleep 10

      - name: Wait for services to be healthy
        run: |
          echo "Checking service health..."
          
          # Function to check if a URL returns HTTP 200
          check_health() {
            local url=$1
            local service_name=$2
            curl -sSf --connect-timeout 5 --max-time 10 "$url" > /dev/null 2>&1
            return $?
          }
          
          # Wait up to 3 minutes for services to be healthy
          max_attempts=60
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"
            
            auth_healthy=false
            account_healthy=false
            
            # Check auth service
            if check_health "http://localhost:8081/actuator/health" "auth"; then
              echo "‚úì Auth service is healthy"
              auth_healthy=true
            else
              echo "‚úó Auth service not ready"
            fi
            
            # Check account service  
            if check_health "http://localhost:8082/actuator/health" "account"; then
              echo "‚úì Account service is healthy"
              account_healthy=true
            else
              echo "‚úó Account service not ready"
            fi
            
            # Both services healthy?
            if [ "$auth_healthy" = true ] && [ "$account_healthy" = true ]; then
              echo "üéâ All services are healthy!"
              break
            fi
            
            # Last attempt failed?
            if [ $attempt -eq $max_attempts ]; then
              echo "üí• Services failed to become healthy within timeout"
              exit 1
            fi
            
            echo "Waiting 3 seconds before next attempt..."
            sleep 3
            attempt=$((attempt + 1))
          done

      - name: Show service status
        run: |
          echo "=== Service Status ==="
          docker ps --filter "name=itest-"
          echo ""
          echo "=== Port bindings ==="
          docker port itest-auth || true
          docker port itest-account || true

      - name: Show logs if services not healthy
        if: failure()
        run: |
          echo "==============================================="
          echo "           DETAILED FAILURE ANALYSIS"
          echo "==============================================="
          
          echo ""
          echo "=== Container Status ==="
          docker ps -a --filter "name=itest-" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          echo ""
          echo "=== Network Information ==="
          docker network inspect itest-net --format '{{range .Containers}}{{.Name}}: {{.IPv4Address}}{{"\n"}}{{end}}' || true
          
          echo ""
          echo "=== PostgreSQL Analysis ==="
          echo "PostgreSQL logs (last 30 lines):"
          docker logs itest-pg 2>&1 | tail -30 || true
          
          echo ""
          echo "Database status:"
          docker exec itest-pg psql -U postgres -c "\l" 2>/dev/null || echo "Could not connect to PostgreSQL"
          
          echo ""
          echo "=== Auth Service Analysis ==="
          echo "Auth service logs (last 50 lines):"
          docker logs itest-auth 2>&1 | tail -50 || true
          
          echo ""
          echo "Auth service process status:"
          docker exec itest-auth ps aux 2>/dev/null || echo "Could not check processes"
          
          echo ""
          echo "=== Account Service Analysis ==="
          echo "Account service logs (last 50 lines):"
          docker logs itest-account 2>&1 | tail -50 || true
          
          echo ""
          echo "Account service process status:"
          docker exec itest-account ps aux 2>/dev/null || echo "Could not check processes"
          
          echo ""
          echo "=== Network Connectivity Tests ==="
          echo "Testing connectivity from auth to postgres:"
          docker exec itest-auth nc -zv itest-pg 5432 2>&1 || echo "Connection failed"
          
          echo "Testing connectivity from account to postgres:"
          docker exec itest-account nc -zv itest-pg 5432 2>&1 || echo "Connection failed"
          
          echo ""
          echo "=== Host Connectivity Tests ==="
          echo "Testing local ports:"
          netstat -tlnp | grep -E "(8081|8082|5432)" || echo "No matching ports found"

      - name: Test API endpoints
        run: |
          echo "Testing API endpoints..."
          
          # Test health endpoints
          echo "Testing auth service health..."
          curl -v http://localhost:8081/actuator/health
          echo ""
          
          echo "Testing account service health..."
          curl -v http://localhost:8082/actuator/health
          echo ""
          
          # Test additional endpoints if available
          echo "Testing auth service info (if available)..."
          curl -sSf http://localhost:8081/actuator/info 2>/dev/null || echo "Info endpoint not available"
          
          echo "Testing account service info (if available)..."
          curl -sSf http://localhost:8082/actuator/info 2>/dev/null || echo "Info endpoint not available"

      - name: Cleanup containers
        if: always()
        run: |
          echo "Cleaning up containers..."
          docker rm -f itest-account itest-auth itest-pg || true
          docker network rm itest-net || true

  # =========================
  # Deployment Info (Summary)
  # =========================
  deployment-options:
    name: üöÄ Deployment Options
    runs-on: ubuntu-latest
    needs: [docker-build, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: üéâ Deployment Ready
        run: |
          echo "üéâ Docker Images erstellt & gepusht!"
          echo ""
          echo "üê≥ Images:"
          echo "  - ghcr.io/${{ github.repository }}/auth-service:latest"
          echo "  - ghcr.io/${{ github.repository }}/account-service:latest"
          echo "  - ghcr.io/${{ github.repository }}/frontend:latest"
          echo ""
          echo "üëâ Compose: ./scripts/deploy-local.sh"
          echo "üëâ K8s Demo: ./scripts/start-k8s-demo.sh [--minimal]"

  # =========================
  # Pipeline Summary
  # =========================
  deployment-report:
    name: üìä Pipeline Summary
    runs-on: ubuntu-latest
    needs:
      [frontend-build, auth-service-build, account-service-build,
       sonar-auth-service, sonar-account-service, docker-build,
       integration-test, deployment-options]
    if: always()
    steps:
      - name: üìä Build Summary
        run: |
          echo "üèóÔ∏è BANK PORTAL CI/CD PIPELINE SUMMARY"
          echo "====================================="
          echo "üì¶ Frontend Build:        ${{ needs.frontend-build.result }}"
          echo "üîê Auth Service Build:    ${{ needs.auth-service-build.result }}"
          echo "üíº Account Service Build: ${{ needs.account-service-build.result }}"
          echo "üîç SonarCloud Auth:       ${{ needs.sonar-auth-service.result }}"
          echo "üîç SonarCloud Account:    ${{ needs.sonar-account-service.result }}"
          echo "üê≥ Docker Build & Push:   ${{ needs.docker-build.result }}"
          echo "üß™ Integration Tests:     ${{ needs.integration-test.result }}"
          echo "üöÄ Deployment Options:    ${{ needs.deployment-options.result }}"
          echo ""
          echo "üìà SonarCloud Org: https://sonarcloud.io/organizations/thanhtuanh"
          echo "üê≥ GHCR Packages:"
          echo "- Auth: https://github.com/${{ github.repository }}/pkgs/container/bankportal-demo%2Fauth-service"
          echo "- Account: https://github.com/${{ github.repository }}/pkgs/container/bankportal-demo%2Faccount-service"
          echo "- Frontend: https://github.com/${{ github.repository }}/pkgs/container/bankportal-demo%2Ffrontend"