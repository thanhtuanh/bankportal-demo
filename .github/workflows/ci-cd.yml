name: Bank Portal CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  frontend-build-test:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci
      - run: npm run lint
      - run: npm run test:ci
      # TODO: E2E-Tests vorerst deaktiviert
      # - run: npm run e2e:ci
      - run: npm run build:prod
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 30

  auth-service-build-test:
    name: Auth Service Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./auth-service
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: authdb_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven
      - run: mvn test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/authdb_test
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          JWT_SECRET: testsecretkeytestsecretkeytestsecretkey123456
      - run: mvn clean package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: auth-service-jar
          path: auth-service/target/*.jar
          retention-days: 30

  account-service-build-test:
    name: Account Service Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./account-service
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: accountdb_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven
      - run: mvn test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5433/accountdb_test
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          JWT_SECRET: testsecretkeytestsecretkey123456
      - run: mvn clean package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: account-service-jar
          path: account-service/target/*.jar
          retention-days: 30

  # SonarQube Analysis - Auth Service
  sonar-auth-service:
    name: SonarQube Analysis - Auth Service
    runs-on: ubuntu-latest
    needs: [auth-service-build-test]
    defaults:
      run:
        working-directory: ./auth-service
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: authdb_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevance of analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze Auth Service
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/authdb_test
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          JWT_SECRET: testsecretkeytestsecretkeytestsecretkey123456
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=thanhtuanh_bankportal-demo-auth-service \
            -Dsonar.projectName="Bank Portal Auth Service" \
            -Dsonar.organization=thanhtuanh \
            -Dsonar.host.url=https://sonarcloud.io

  # SonarQube Analysis - Account Service
  sonar-account-service:
    name: SonarQube Analysis - Account Service
    runs-on: ubuntu-latest
    needs: [account-service-build-test]
    defaults:
      run:
        working-directory: ./account-service
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: accountdb_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevance of analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze Account Service
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5433/accountdb_test
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          JWT_SECRET: testsecretkeytestsecretkey123456
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=thanhtuanh_bankportal-demo-account-service \
            -Dsonar.projectName="Bank Portal Account Service" \
            -Dsonar.organization=thanhtuanh \
            -Dsonar.host.url=https://sonarcloud.io

  # Docker Build und Push zu GHCR
  docker-build-push:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [auth-service-build-test, account-service-build-test, frontend-build-test, sonar-auth-service, sonar-account-service]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Bei GitHub Container Registry anmelden
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Buildx einrichten
        uses: docker/setup-buildx-action@v3

      - name: Auth Service Artifacts herunterladen
        uses: actions/download-artifact@v4
        with:
          name: auth-service-jar
          path: ./auth-service/target/

      - name: Account Service Artifacts herunterladen
        uses: actions/download-artifact@v4
        with:
          name: account-service-jar
          path: ./account-service/target/

      - name: Frontend Artifacts herunterladen
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: ./frontend/dist/

      - name: Metadaten für Auth Service extrahieren
        id: meta-auth
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-auth-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Auth Service Docker Image bauen und pushen
        uses: docker/build-push-action@v5
        with:
          context: ./auth-service
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-auth.outputs.tags }}
          labels: ${{ steps.meta-auth.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Metadaten für Account Service extrahieren
        id: meta-account
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-account-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Account Service Docker Image bauen und pushen
        uses: docker/build-push-action@v5
        with:
          context: ./account-service
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-account.outputs.tags }}
          labels: ${{ steps.meta-account.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Metadaten für Frontend extrahieren
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Frontend Docker Image bauen und pushen
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max