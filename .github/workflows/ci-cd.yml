# .github/workflows/ci-cd.yml
# ===========================================
# Bank Portal CI/CD Pipeline
# ===========================================
name: Bank Portal CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
# ===================================================================
# FRONTEND BUILD & TEST
# ===================================================================
  frontend-build-test:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run unit tests
      run: npm run test:ci

    # ➡️ E2E Tests optional später mit start-server-and-test
    # - name: Run e2e tests
    #   run: npm run e2e:ci

    - name: Build application
      run: npm run build:prod

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/
        retention-days: 30

# ===================================================================
# AUTH SERVICE BUILD & TEST
# ===================================================================
  auth-service-build-test:
    name: Auth Service Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./auth-service

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: authdb_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Run tests
      run: mvn test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/authdb_test
        SPRING_DATASOURCE_USERNAME: test
        SPRING_DATASOURCE_PASSWORD: test
        JWT_SECRET: testsecretkeytestsecretkeytestsecretkey123456

    - name: Build application
      run: mvn clean package -DskipTests

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: auth-service-jar
        path: auth-service/target/*.jar
        retention-days: 30

# ===================================================================
# ACCOUNT SERVICE BUILD & TEST
# ===================================================================
  account-service-build-test:
    name: Account Service Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./account-service

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: accountdb_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Run tests
      run: mvn test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5433/accountdb_test
        SPRING_DATASOURCE_USERNAME: test
        SPRING_DATASOURCE_PASSWORD: test
        JWT_SECRET: testsecretkeytestsecretkeytestsecretkey123456

    - name: Build application
      run: mvn clean package -DskipTests

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: account-service-jar
        path: account-service/target/*.jar
        retention-days: 30

# ===================================================================
# SECURITY & CODE QUALITY
# ===================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [frontend-build-test, auth-service-build-test, account-service-build-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    # - name: Upload Trivy scan results (aktivieren wenn Berechtigungen OK)
    #   uses: github/codeql-action/upload-sarif@v3
    #   with:
    #     sarif_file: 'trivy-results.sarif'

    - name: Frontend Security Audit
      working-directory: ./frontend
      run: |
        npm ci
        npm audit --audit-level high

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: [frontend-build-test, auth-service-build-test, account-service-build-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup JDK for SonarCloud
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: SonarCloud Scan - Auth Service
      working-directory: ./auth-service
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mvn sonar:sonar \
          -Dsonar.projectKey=${{ github.repository_owner }}_bankportal-auth-service \
          -Dsonar.organization=${{ github.repository_owner }} \
          -Dsonar.host.url=https://sonarcloud.io

    - name: SonarCloud Scan - Account Service
      working-directory: ./account-service
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mvn sonar:sonar \
          -Dsonar.projectKey=${{ github.repository_owner }}_bankportal-account-service \
          -Dsonar.organization=${{ github.repository_owner }} \
          -Dsonar.host.url=https://sonarcloud.io

# ===================================================================
# DOCKER BUILD
# ===================================================================
  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [auth-service-build-test]

    strategy:
      matrix:
        service: [auth-service]

    steps:
    - uses: actions/checkout@v4

    - name: Download auth-service JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: auth-service-jar
        path: ./auth-service/target

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./auth-service
        push: true
        tags: ghcr.io/thanhtuanh/bankportal-demo-auth-service:latest

# ===================================================================
# DEPLOYMENT
# ===================================================================
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-docker-images, security-scan, code-quality]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'dev'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_DEV }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to Kubernetes
      run: |
        export KUBECONFIG=kubeconfig
        envsubst < k8s/dev/deployment.yaml | kubectl apply -f -
        kubectl rollout status deployment/bankportal-frontend -n bankportal-dev
        kubectl rollout status deployment/bankportal-auth-service -n bankportal-dev
        kubectl rollout status deployment/bankportal-account-service -n bankportal-dev
      env:
        IMAGE_TAG: ${{ github.sha }}
        ENVIRONMENT: dev

    - name: Run health checks
      run: |
        export KUBECONFIG=kubeconfig
        kubectl wait --for=condition=ready pod -l app=bankportal-frontend -n bankportal-dev --timeout=300s
        kubectl wait --for=condition=ready pod -l app=bankportal-auth-service -n bankportal-dev --timeout=300s
        kubectl wait --for=condition=ready pod -l app=bankportal-account-service -n bankportal-dev --timeout=300s

  # Staging & Production Deployment analog
