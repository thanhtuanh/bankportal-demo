name: Bank Portal CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  frontend-build-test:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci
      - run: npm run lint
      - run: npm run test:ci
      # TODO: E2E-Tests vorerst deaktiviert
      # - run: npm run e2e:ci
      - run: npm run build:prod
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 30

  auth-service-build-test:
    name: Auth Service Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./auth-service
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: authdb_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven
      - run: mvn test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/authdb_test
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          JWT_SECRET: testsecretkeytestsecretkeytestsecretkey123456
      - run: mvn clean package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: auth-service-jar
          path: auth-service/target/*.jar
          retention-days: 30

  account-service-build-test:
    name: Account Service Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./account-service
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: accountdb_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven
      - run: mvn test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5433/accountdb_test
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          JWT_SECRET: testsecretkeytestsecretkey123456
      - run: mvn clean package -DskipTests
      - uses: actions/upload-artifact@v4
        with:
          name: account-service-jar
          path: account-service/target/*.jar
          retention-days: 30

  sonar-auth-service:
    name: SonarQube Analysis - Auth Service
    runs-on: ubuntu-latest
    needs: [auth-service-build-test]
    defaults:
      run:
        working-directory: ./auth-service
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: authdb_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze Auth Service
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/authdb_test
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          JWT_SECRET: testsecretkeytestsecretkeytestsecretkey123456
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=thanhtuanh_bankportal-demo-auth-service \
            -Dsonar.projectName="Bank Portal Auth Service" \
            -Dsonar.organization=thanhtuanh \
            -Dsonar.host.url=https://sonarcloud.io

  sonar-account-service:
    name: SonarQube Analysis - Account Service
    runs-on: ubuntu-latest
    needs: [account-service-build-test]
    defaults:
      run:
        working-directory: ./account-service
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: accountdb_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze Account Service
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5433/accountdb_test
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          JWT_SECRET: testsecretkeytestsecretkey123456
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=thanhtuanh_bankportal-demo-account-service \
            -Dsonar.projectName="Bank Portal Account Service" \
            -Dsonar.organization=thanhtuanh \
            -Dsonar.host.url=https://sonarcloud.io

  docker-build-push:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [auth-service-build-test, account-service-build-test, frontend-build-test, sonar-auth-service, sonar-account-service]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Bei GitHub Container Registry anmelden
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Buildx einrichten
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0

      - name: Auth Service Artifacts herunterladen
        uses: actions/download-artifact@v4
        with:
          name: auth-service-jar
          path: ./auth-service/target/

      - name: Account Service Artifacts herunterladen
        uses: actions/download-artifact@v4
        with:
          name: account-service-jar
          path: ./account-service/target/

      - name: Frontend Artifacts herunterladen
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: ./frontend/dist/

      - name: Metadaten für Auth Service extrahieren
        id: meta-auth
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-auth-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Auth Service Docker Image bauen und pushen
        uses: docker/build-push-action@v5
        with:
          context: ./auth-service
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-auth.outputs.tags }}
          labels: ${{ steps.meta-auth.outputs.labels }}
          provenance: false
          # GitHub Actions Cache temporär deaktiviert wegen Service-Problemen
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

      - name: Metadaten für Account Service extrahieren
        id: meta-account
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-account-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Account Service Docker Image bauen und pushen
        uses: docker/build-push-action@v5
        with:
          context: ./account-service
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-account.outputs.tags }}
          labels: ${{ steps.meta-account.outputs.labels }}
          provenance: false
          # GitHub Actions Cache temporär deaktiviert wegen Service-Problemen
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

      - name: Metadaten für Frontend extrahieren
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Frontend Docker Image bauen und pushen
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          provenance: false
          # GitHub Actions Cache temporär deaktiviert wegen Service-Problemen
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

  generate-report:
    name: Generate Build Report
    runs-on: ubuntu-latest
    needs: [frontend-build-test, auth-service-build-test, account-service-build-test, sonar-auth-service, sonar-account-service, docker-build-push]
    if: always()
    steps:
      - name: Generate Summary Report
        run: |
          echo "# 🚀 Bank Portal CI/CD Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Build Status" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ needs.frontend-build-test.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Auth Service | ${{ needs.auth-service-build-test.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Account Service | ${{ needs.account-service-build-test.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SonarQube Auth | ${{ needs.sonar-auth-service.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SonarQube Account | ${{ needs.sonar-account-service.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build & Push | ${{ needs.docker-build-push.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [SonarCloud Auth Service](https://sonarcloud.io/project/overview?id=thanhtuanh_bankportal-demo-auth-service)" >> $GITHUB_STEP_SUMMARY
          echo "- [SonarCloud Account Service](https://sonarcloud.io/project/overview?id=thanhtuanh_bankportal-demo-account-service)" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Container Registry](https://github.com/thanhtuanh/bankportal-demo/pkgs/container/bankportal-demo-auth-service)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📈 Pipeline Metriken" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** \`${{ github.repository }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Built at:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Nächste Schritte" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Code-Qualität in SonarCloud überprüfen" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Docker Images in GHCR kontrollieren" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Deployment planen" >> $GITHUB_STEP_SUMMARY

  update-readme:
    name: Update README Dashboard
    runs-on: ubuntu-latest
    needs: [generate-report]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Update README Status
        run: |
          # Get real commit author name
          AUTHOR_NAME=$(git log -1 --pretty=format:'%an')
          
          # Backup current README
          if [ -f README.md ]; then
            cp README.md README.backup.md
          fi
          
          # Check if README has CI/CD status section and remove it
          if grep -q "<!-- CI/CD STATUS START -->" README.md 2>/dev/null; then
            # Remove old CI/CD status section and everything after it
            sed '/<!-- CI/CD STATUS START -->/,$d' README.md > README.temp.md
            mv README.temp.md README.md
          fi
          
          # Append CI/CD status section to existing README (preserving original content)
          cat >> README.md << EOF
          
          <!-- CI/CD STATUS START -->
          
          -----
          
          ## 🤖 CI/CD Pipeline Status
          
          ![CI/CD Pipeline](https://github.com/${{ github.repository }}/workflows/Bank%20Portal%20CI%2FCD%20Pipeline/badge.svg)
          ![Last Commit](https://img.shields.io/github/last-commit/${{ github.repository }})
          ![Repo Size](https://img.shields.io/github/repo-size/${{ github.repository }})
          
          ### 📊 Aktueller Build Status
          
          | Service | Status | Letztes Update |
          |---------|--------|----------------|
          | 🔐 Auth Service | ✅ Build erfolgreich | $(date '+%d.%m.%Y %H:%M:%S') |
          | 💰 Account Service | ✅ Build erfolgreich | $(date '+%d.%m.%Y %H:%M:%S') |
          | 🌐 Frontend | ✅ Build erfolgreich | $(date '+%d.%m.%Y %H:%M:%S') |
          | 🔍 SonarQube Analyse | ✅ Abgeschlossen | $(date '+%d.%m.%Y %H:%M:%S') |
          | 🐳 Docker Images | ✅ Zu GHCR gepusht | $(date '+%d.%m.%Y %H:%M:%S') |
          
          ### 🔗 Entwickler-Links
          
          - **🔍 Code-Qualität:** [SonarCloud Dashboard](https://sonarcloud.io/organizations/thanhtuanh/projects)
          - **🐳 Container Images:** [GitHub Container Registry](https://github.com/${{ github.repository }}/pkgs)
          - **📋 CI/CD Pipeline:** [GitHub Actions](https://github.com/${{ github.repository }}/actions)
          - **📊 Pipeline Report:** [Letzter Lauf](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ### 📈 Letzte Pipeline-Aktivität
          
          - **Letzter Commit:** \`${{ github.sha }}\`
          - **Branch:** \`${{ github.ref_name }}\`
          - **Autor:** \${AUTHOR_NAME}
          - **Build-Zeit:** $(date '+%d.%m.%Y %H:%M:%S')
          - **Ausgelöst durch:** ${{ github.event_name }}
          
          ### 🛠️ DevOps Pipeline
          
          | Phase | Tool | Status |
          |-------|------|--------|
          | Build | Maven + npm | ✅ |
          | Tests | JUnit + Jest | ✅ |
          | Code-Qualität | SonarCloud | ✅ |
          | Containerisierung | Docker + GHCR | ✅ |
          | CI/CD | GitHub Actions | ✅ |
          
          > **Hinweis:** Diese Pipeline demonstriert moderne DevOps-Praktiken für die Bankenbranche mit automatisierten Tests, Code-Qualitätsprüfungen und sicherer Container-Bereitstellung.
          
          -----
          *🤖 Automatisch aktualisiert durch GitHub Actions Pipeline - $(date '+%d.%m.%Y %H:%M:%S')*
          
          <!-- CI/CD STATUS END -->
          EOF

      - name: Commit README
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add README.md
          if git diff --staged --quiet; then
            echo "Keine Änderungen in README.md"
          else
            git commit -m "📊 Update README dashboard [skip ci]"
            git push
          fi